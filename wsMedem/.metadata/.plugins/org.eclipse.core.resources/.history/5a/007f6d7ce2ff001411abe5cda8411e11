package com.medem.dao;

import java.util.List;

import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.hibernate.Criteria;
import org.hibernate.FetchMode;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.medem.model.Company;

@Repository("companyDAO")
public class CompanyDAOImpl extends HibernateDaoSupportWithJdbcTemplateHolder implements CompanyDAO {

    private static final Logger logger = Logger.getLogger(CompanyDAOImpl.class);
    
	@Autowired
	public CompanyDAOImpl(HibernateTemplate hibernateTemplate){
		super(hibernateTemplate);
	}
	
	@Transactional
	public void addCompany(Company company) throws DataAccessException {
		getHibernateTemplate().getSessionFactory().getCurrentSession().save(company);
		
	}
	@SuppressWarnings("unchecked")
	@Transactional
	public List<Company> listCompanies() throws DataAccessException {
		return getHibernateTemplate().getSessionFactory().getCurrentSession().createQuery("from Company company where company.enabled = 1").list();
	}

	@Transactional
	public Company getCompanyById(int id) throws DataAccessException {
		return (Company) getHibernateTemplate().getSessionFactory().getCurrentSession().load(Company.class, new Integer(id));
	}

	
	@Transactional
	public void updateCompany(Company company) throws DataAccessException{
	    BasicConfigurator.configure();
	    Company companyToUpdate = (Company) getHibernateTemplate().getSessionFactory().getCurrentSession().load(Company.class, new Integer(company.getId()));
	    companyToUpdate.setName(company.getName());
	    companyToUpdate.setBusinessName(company.getBusinessName());
	    companyToUpdate.setCompanyActivity(company.getCompanyActivity());
	    companyToUpdate.setEmployeeRegistration(company.getEmployeeRegistration());
	    companyToUpdate.setName_mainDoctor(company.getName_mainDoctor());
	    getHibernateTemplate().getSessionFactory().getCurrentSession().saveOrUpdate(companyToUpdate);
	}
	
//	@Transactional
//	public void deleteCompany(int id) throws DataAccessException{
//	    try{
//	        Company  = (Company) getHibernateTemplate().getSessionFactory().getCurrentSession().load(Company.class, new Integer(id));
//	        companyToDelete.setActive(0);
//	        getHibernateTemplate().getSessionFactory().getCurrentSession().save(companyToDelete);
//	    }
//	    catch(Exception e){
//	        System.out.println(e);
//	    }
//	}
	
	@Transactional
	public void deleteCompany(Company company) throws DataAccessException{
	    Company companyToDelete = (Company) getHibernateTemplate().getSessionFactory().getCurrentSession().load(Company.class, new Integer(company.getId()));
	    companyToDelete.setActive(0);
	    getHibernateTemplate().getSessionFactory().getCurrentSession().save(companyToDelete);
	}
	
	@Transactional
	public Company getFullCompany(int companyId) throws DataAccessException{
	    Criteria criteria = getHibernateTemplate().getSessionFactory().getCurrentSession().createCriteria(Company.class,"company");
	    criteria.setFetchMode("companyActivity", FetchMode.JOIN);
	    criteria.add(Restrictions.idEq(companyId)).uniqueResult();
	    Company company = (Company) criteria.list().get(0);
	    logger.debug("COMPANY FULL: " + company.toString());
	    
	    return company;
	}
	
	@SuppressWarnings("unchecked")
	@Transactional
	public List<Company> searchCompanyByName(String name) throws DataAccessException{
	    return getHibernateTemplate().getSessionFactory().getCurrentSession().createQuery("from Company company where company.name like '%"+ name +"%' and company.active=1").list();
	}
	
}
